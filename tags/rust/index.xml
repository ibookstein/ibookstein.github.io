<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on Layer of Indirection</title>
    <link>https://ibookstein.github.io/tags/rust/</link>
    <description>Recent content in rust on Layer of Indirection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2023 — Itay Bookstein — CC BY 4.0</copyright>
    <lastBuildDate>Fri, 14 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ibookstein.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Toy Arbitrary-Precision Float in Rust</title>
      <link>https://ibookstein.github.io/posts/2023-07-14-toy-float/</link>
      <pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ibookstein.github.io/posts/2023-07-14-toy-float/</guid>
      <description>In this post, we&amp;rsquo;re going to get our hands dirty writing a toy arbitrary-precision floating point implementation in Rust. I&amp;rsquo;m therefore going to assume basic knowledge of IEEE754 (binary) floating point numbers. If you feel unprepared, I can recommend the following articles, which contain excellent visualizations:
Bartosz Ciechanowski&amp;rsquo;s Exposing Floating Point. Michael Matloka&amp;rsquo;s Floating-point arithmetic – all you need to know, explained interactively. Having an arbitrary-precision implementation is useful for pedagogical purposes, because a good mental model for IEEE754 floating point computations is to pretend that each computation happens in ideal math land, and is then brought back down to finite precision land as a separate post-processing step.</description>
    </item>
    
  </channel>
</rss>
